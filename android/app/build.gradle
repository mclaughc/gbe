import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.example.user.gbe"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        ndk {
            moduleName "gbe"
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/jni'
        jni.srcDirs = []
    }

    // call regular ndk-build(.cmd) script from app directory, in either debug or release mode
    tasks.withType(JavaCompile) {
        compileTask ->
            def tmpFile = file('src/main/jni/.debugbuild.tmp') //used to persist the last build type, to avoid triggering rebuilds all the time.
            def ndkBuildExt = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""

            def debugMode = compileTask.name.contains("Debug")
            def taskName = "ndk${debugMode ? "Debug" : "Release"}Build"
            def packageTaskName = "ndk${debugMode ? "Debug" : "Release"}Package"

            def extraParameter = debugMode ? "NDK_DEBUG=1" : "NDK_DEBUG=0" // other possibility for debug build:
            // referencing an other Application.mk that contains APP_OPTIM:=debug and other options
            // -> "NDK_APPLICATION_MK=" + file('src/main/jni/Application-debug.mk').absolutePath

            def task = tasks.findByPath(taskName);
            if (task == null) {
                //create ndkReleaseBuild and ndkDebugBuild tasks
                task = tasks.create(name: taskName) {
                    doLast {
                        exec {
                            //execute all this block when the task is executed. (A Build task gets only the commandLine to be executed, so here we're using doLast.exec instead)
                            if (!tmpFile.exists()) tmpFile.createNewFile()

                            def ndkDir = android.ndkDirectory.getAbsolutePath()
                            if (tmpFile.text != String.valueOf(debugMode)) {
                                commandLine ndkDir + "/ndk-build${ndkBuildExt}", '-B', '-C', file('src/main').absolutePath, extraParameter, '-j8'
                            } else {
                                commandLine ndkDir + "/ndk-build${ndkBuildExt}", '-C', file('src/main').absolutePath, extraParameter, '-j8'
                            }

                            tmpFile.write(String.valueOf(debugMode))
                        }
                    }
                }
            }
            def packageTask = tasks.findByPath(packageTaskName);
            if (packageTask == null) {
                packageTask = tasks.create(name: packageTaskName, type: Zip, dependsOn: taskName, description: 'Create a JAR of the native libs') {
                    destinationDir new File(buildDir, '../src/main/libs')
                    baseName 'ndk-libs'
                    extension 'jar'
                    from(new File(buildDir, '../src/main/obj/local')) { include '**/*.so' }
                    into 'lib/'
                }
                packageTask.dependsOn task
            }
            compileTask.dependsOn packageTask
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:cardview-v7:23.1.0'
    compile 'jp.wasabeef:recyclerview-animators:2.0.1'
    compile 'com.nononsenseapps:filepicker:2.4.2'

    compile fileTree(dir: new File(buildDir, '../src/main/libs'), include: 'ndk-libs.jar')
}
